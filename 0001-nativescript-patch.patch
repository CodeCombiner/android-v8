From 3e90a6db3cd331083c6876432fb9a248db5f2f57 Mon Sep 17 00:00:00 2001
From: plamen5kov <plamen.krasimirov.petkov@gmail.com>
Date: Wed, 17 Aug 2016 09:33:37 +0300
Subject: [PATCH] nativescript patch

---
 src/V8NativeScriptExtension.cc | 231 +++++++++++++++++++++++++++++++++++++++++
 src/V8NativeScriptExtension.h  |  26 +++++
 src/api.cc                     |  18 +++-
 src/v8.gyp                     |   2 +
 4 files changed, 275 insertions(+), 2 deletions(-)
 create mode 100644 src/V8NativeScriptExtension.cc
 create mode 100644 src/V8NativeScriptExtension.h

diff --git a/src/V8NativeScriptExtension.cc b/src/V8NativeScriptExtension.cc
new file mode 100644
index 0000000..75e0f0c
--- /dev/null
+++ b/src/V8NativeScriptExtension.cc
@@ -0,0 +1,231 @@
+#include "V8NativeScriptExtension.h"
+#include "api.h"
+#include "checks.h"
+#include "contexts.h"
+#include "globals.h"
+#include "handles.h"
+#include "assembler.h"
+#include "keys.h"
+#include <assert.h>
+
+
+using namespace v8;
+
+template<typename T>
+class unsafe_arr
+{
+public:
+	unsafe_arr()
+		: m_capacity(16), m_size(0)
+	{
+		m_data = alloc_data(m_capacity);
+	}
+
+	void push_back(const T& e)
+	{
+		if (m_size == m_capacity)
+		{
+			resize();
+		}
+		m_data[m_size++] = e;
+	}
+
+	T* data() const
+	{
+		return m_data;
+	}
+
+	size_t size() const
+	{
+		return m_size;
+	}
+
+	static void release_data(T *data)
+	{
+		free(data);
+	}
+
+private:
+	T* alloc_data(size_t size)
+	{
+		T *data = reinterpret_cast<T*>(malloc(size * sizeof(T)));
+		return data;
+	}
+
+	void resize()
+	{
+		size_t capacity = 2 * m_capacity;
+		T *data = alloc_data(capacity);
+		size_t size = m_size * sizeof(T);
+		memcpy(data, m_data, size);
+		release_data(m_data);
+		m_data = data;
+		m_capacity = capacity;
+	}
+
+	size_t m_capacity;
+	size_t m_size;
+	T *m_data;
+};
+
+
+NativeScriptExtension::NativeScriptExtension()
+{
+}
+
+
+uint8_t* NativeScriptExtension::GetAddress(const Local<Object>& obj)
+{
+	i::Handle<i::JSReceiver> h = Utils::OpenHandle(*obj);
+
+	return h->address();
+}
+
+Local<Value>* NativeScriptExtension::GetClosureObjects(Isolate *isolate, const Local<Function>& func, int *length)
+{
+	unsafe_arr< Local<Value> > arr;
+
+	i::Handle<i::JSReceiver> receiver = Utils::OpenHandle(*func);
+
+	bool isFunction = receiver->IsJSFunction();
+
+	if (!isFunction) {
+		*length = static_cast<int>(arr.size());
+		return arr.data();
+	}
+
+	i::Handle<i::JSFunction> f = i::Handle<i::JSFunction>::cast(receiver);
+
+	i::Isolate* internal_isolate = reinterpret_cast<i::Isolate*>(isolate);
+
+	i::Context *cxt = f->context();
+
+	i::ContextLookupFlags cxtFlags = i::FOLLOW_CHAINS;
+
+	while ((cxt != nullptr) && (!cxt->IsNativeContext()))
+	{
+		i::JSFunction *closure = cxt->closure();
+
+		if (closure != nullptr)
+		{
+			i::SharedFunctionInfo *sharedFuncInfo = closure->shared();
+
+			if (sharedFuncInfo != nullptr)
+			{
+				i::ScopeInfo *si = sharedFuncInfo->scope_info();
+
+				if (si != nullptr)
+				{
+					int len = si->length();
+
+					for (int i = 0; i < len; i++)
+					{
+						i::Object *cur = si->get(i);
+
+						if ((cur != nullptr) && (cur->IsString()))
+						{
+							i::String *s = i::String::cast(cur);
+
+							i::Handle<i::String> name = i::Handle<i::String>(s, internal_isolate);
+
+							i::PropertyAttributes attr;
+							i::BindingFlags bf;
+							int idx;
+
+							i::Handle<i::Object> o = cxt->Lookup(name, cxtFlags, &idx, &attr, &bf);
+
+							if (idx >= 0)
+							{
+								i::Handle<i::Context> hndCxt = i::Handle<i::Context>::cast(o);
+								i::Handle<i::Object> obj = i::Handle<i::Object>(hndCxt->get(idx), internal_isolate);
+
+								if (!obj.is_null() && obj->IsObject())
+								{
+									Local<Value> local = Utils::ToLocal(obj);
+
+									arr.push_back(local);
+								}
+							}
+						}
+					} // for
+				} // si != nullptr
+			} // sharedFuncInfo != nullptr
+		} // closure != nullptr
+
+		cxt = cxt->previous();
+	}
+
+	*length = static_cast<int>(arr.size());
+	return arr.data();
+}
+
+
+void NativeScriptExtension::ReleaseClosureObjects(Local<Value>* closureObjects)
+{
+	unsafe_arr< Local<Value> >::release_data(closureObjects);
+}
+
+
+void NativeScriptExtension::GetAssessorPair(Isolate *isolate, const Local<Object>& obj, const Local<String>& propName, Local<Value>& getter, Local<Value>& setter)
+{
+	i::Handle<i::JSObject> o = i::Handle<i::JSObject>::cast(Utils::OpenHandle(*obj));
+
+	i::Handle<i::String> intname = Utils::OpenHandle(*propName);
+
+	//Isolate* isolate = object->GetIsolate();
+	
+	internal::LookupIterator it(o, intname, internal::LookupIterator::OWN);
+	i::Handle<i::Object> maybe_pair = it.GetAccessors();
+
+	// if (maybe_pair->IsAccessorPair()) {
+		i::MaybeHandle<i::Object> g = internal::AccessorPair::GetComponent(i::Handle<internal::AccessorPair>::cast(maybe_pair), i::AccessorComponent::ACCESSOR_GETTER);
+		if (!g.is_null())
+		{
+			getter = Utils::ToLocal(g.ToHandleChecked());
+		}
+
+		i::MaybeHandle<i::Object> s = internal::AccessorPair::GetComponent(i::Handle<internal::AccessorPair>::cast(maybe_pair), i::AccessorComponent::ACCESSOR_SETTER);
+		if (!s.is_null())
+		{
+			setter = Utils::ToLocal(s.ToHandleChecked());
+		}
+	// }
+}
+
+
+Local<Array> NativeScriptExtension::GetPropertyKeys(Isolate *isolate, const Local<Context>& context, const Local<Object>& object, bool& success)
+{
+	success = true;
+
+	i::Handle<i::JSObject> obj = i::Handle<i::JSObject>::cast(Utils::OpenHandle(*object));
+	i::Isolate* internal_isolate = reinterpret_cast<i::Isolate*>(isolate);
+	// i::Object* internal_object = reinterpret_cast<i::Object*>(Utils::OpenHandle(*object));
+
+	i::Handle<i::FixedArray> arr = i::KeyAccumulator::GetEnumPropertyKeys(internal_isolate, obj);
+
+	int len = arr->length();
+
+	Local<Array> keys = Array::New(isolate, len);
+	for (int i = 0; i < len; i++)
+	{
+		i::Handle<i::Object> elem = i::Handle<i::Object>(arr->get(i), obj->GetIsolate());
+		Local<Value> val = Utils::ToLocal(elem);
+		Maybe<bool> res = keys->Set(context, i, val);
+		success &= (res.IsJust() && res.FromJust());
+	}
+
+	return keys;
+}
+
+int NativeScriptExtension::GetInternalFieldCount(const v8::Local<v8::Object>& object)
+{
+	i::Handle<i::JSObject> obj = i::Handle<i::JSObject>::cast(Utils::OpenHandle(*object));
+
+	int count = obj->GetInternalFieldCount();
+
+	return count;
+}
+
+void NativeScriptExtension::CpuFeaturesProbe(bool cross_compile) {
+	internal::CpuFeatures::Probe(cross_compile);
+}
diff --git a/src/V8NativeScriptExtension.h b/src/V8NativeScriptExtension.h
new file mode 100644
index 0000000..ede7550
--- /dev/null
+++ b/src/V8NativeScriptExtension.h
@@ -0,0 +1,26 @@
+#include "v8.h"
+#include "handles.h"
+
+namespace v8 {
+	
+	class NativeScriptExtension {
+	public:
+		static uint8_t* GetAddress(const v8::Local<v8::Object>& obj);
+
+		static v8::Local<v8::Value>* GetClosureObjects(v8::Isolate *isolate, const v8::Local<v8::Function>& func, int *length);
+
+		static void ReleaseClosureObjects(v8::Local<v8::Value>* closureObjects);
+		
+		static void GetAssessorPair(v8::Isolate *isolate, const v8::Local<v8::Object>& obj, const v8::Local<v8::String>& propName, v8::Local<v8::Value>& getter, v8::Local<v8::Value>& setter);
+
+		static v8::Local<v8::Array> GetPropertyKeys(v8::Isolate *isolate, const v8::Local<v8::Context>& context, const v8::Local<v8::Object>& object, bool& success);
+
+		static int GetInternalFieldCount(const v8::Local<v8::Object>& object);
+
+        static void CpuFeaturesProbe(bool cross_compile);
+	private:
+		NativeScriptExtension();
+
+		// static v8::internal::Handle<v8::internal::FixedArray> GetEnumPropertyKeys(const v8::internal::Handle<v8::internal::JSObject>& object, bool cache_result);
+	};
+}
diff --git a/src/api.cc b/src/api.cc
index a4e047c..2b56833 100644
--- a/src/api.cc
+++ b/src/api.cc
@@ -371,8 +371,22 @@ bool RunExtraCode(Isolate* isolate, Local<Context> context,
   ScriptOrigin origin(resource_name);
   ScriptCompiler::Source source(source_string, origin);
   Local<Script> script;
-  if (!ScriptCompiler::Compile(context, &source).ToLocal(&script)) return false;
-  if (script->Run(context).IsEmpty()) return false;
+  if (!ScriptCompiler::Compile(context, &source).ToLocal(&script)) {
+    base::OS::PrintError("# Script compile failed in %s@%d:%d\n%s\n",
+                         *String::Utf8Value(try_catch.Message()->GetScriptResourceName()),
+                         try_catch.Message()->GetLineNumber(context).FromJust(),
+                         try_catch.Message()->GetStartColumn(context).FromJust(),
+                         *String::Utf8Value(try_catch.Exception()));
+    return false;
+  }
+  if (script->Run(context).IsEmpty()) {
+    base::OS::PrintError("# Script run failed in %s@%d:%d\n%s\n",
+                         *String::Utf8Value(try_catch.Message()->GetScriptResourceName()),
+                         try_catch.Message()->GetLineNumber(context).FromJust(),
+                         try_catch.Message()->GetStartColumn(context).FromJust(),
+                         *String::Utf8Value(try_catch.Exception()));
+    return false;
+  }
   if (i::FLAG_profile_deserialization) {
     i::PrintF("Executing custom snapshot script %s took %0.3f ms\n", name,
               timer.Elapsed().InMillisecondsF());
diff --git a/src/v8.gyp b/src/v8.gyp
index ef0c562..1fad759 100644
--- a/src/v8.gyp
+++ b/src/v8.gyp
@@ -400,6 +400,8 @@
         '../include/v8-version.h',
         '../include/v8.h',
         '../include/v8config.h',
+	'V8NativeScriptExtension.cc',
+	'V8NativeScriptExtension.h',
         'accessors.cc',
         'accessors.h',
         'address-map.cc',
-- 
2.7.1.windows.2

