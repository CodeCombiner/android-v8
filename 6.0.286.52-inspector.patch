From 4ab3e35ec873731346eb15040fe3a873cf49c58f Mon Sep 17 00:00:00 2001
From: Peter Kanev <pip3r4o@gmail.com>
Date: Tue, 15 Aug 2017 17:16:01 +0300
Subject: [PATCH] inspector patch

---
 src/inspector/inspector_protocol_config.json |   49 +-
 src/inspector/js_protocol.json               | 2669 +++++++++++++++++++++++++-
 2 files changed, 2708 insertions(+), 10 deletions(-)

diff --git a/src/inspector/inspector_protocol_config.json b/src/inspector/inspector_protocol_config.json
index ce84b7c714..b020fb8532 100644
--- a/src/inspector/inspector_protocol_config.json
+++ b/src/inspector/inspector_protocol_config.json
@@ -3,21 +3,39 @@
         "path": "js_protocol.json",
         "package": "src/inspector/protocol",
         "output": "protocol",
-        "namespace": ["v8_inspector", "protocol"],
+        "namespace": [
+            "v8_inspector",
+            "protocol"
+        ],
         "options": [
             {
                 "domain": "Schema",
-                "exported": ["Domain"]
+                "exported": [
+                    "Domain"
+                ]
             },
             {
                 "domain": "Runtime",
-                "async": ["evaluate", "awaitPromise", "callFunctionOn", "runScript"],
-                "exported": ["StackTrace", "RemoteObject"]
+                "async": [
+                    "evaluate",
+                    "awaitPromise",
+                    "callFunctionOn",
+                    "runScript"
+                ],
+                "exported": [
+                    "StackTrace",
+                    "RemoteObject"
+                ]
             },
             {
                 "domain": "Debugger",
-                "async": [ "scheduleStepIntoAsync" ],
-                "exported": ["SearchMatch", "paused.reason"]
+                "async": [
+                    "scheduleStepIntoAsync"
+                ],
+                "exported": [
+                    "SearchMatch",
+                    "paused.reason"
+                ]
             },
             {
                 "domain": "Console"
@@ -27,10 +45,24 @@
             },
             {
                 "domain": "HeapProfiler"
+            },
+            {
+                "domain": "GenericTypes"
+            },
+            {
+                "domain": "Page"
+            },
+            {
+                "domain": "Network"
+            },
+            {
+                "domain": "DOM"
+            },
+            {
+                "domain": "CSS"
             }
         ]
     },
-
     "exported": {
         "package": "include/inspector",
         "output": "../../include/inspector",
@@ -40,10 +72,9 @@
         "to_string_out": "StringBufferImpl::adopt(%s)",
         "export_macro": "V8_EXPORT"
     },
-
     "lib": {
         "package": "src/inspector/protocol",
         "output": "protocol",
         "string_header": "src/inspector/string-util.h"
     }
-}
+}
\ No newline at end of file
diff --git a/src/inspector/js_protocol.json b/src/inspector/js_protocol.json
index 62545cd80d..31f8be5074 100644
--- a/src/inspector/js_protocol.json
+++ b/src/inspector/js_protocol.json
@@ -1082,5 +1082,2672 @@
                 ]
             }
         ]
-    }]
+    },
+            {
+            "domain": "GenericTypes",
+            "description": "Exposes generic types to be used by any domain.",
+            "types": [
+                {
+                    "id": "SearchMatch",
+                    "type": "object",
+                    "description": "Search match in a resource.",
+                    "properties": [
+                        {
+                            "name": "lineNumber",
+                            "type": "number",
+                            "description": "Line number in resource content."
+                        },
+                        {
+                            "name": "lineContent",
+                            "type": "string",
+                            "description": "Line with match content."
+                        }
+                    ]
+                }
+            ]
+        },
+        {
+            "domain": "Page",
+            "description": "Actions and events related to the inspected page belong to the page domain.",
+            "types": [
+                {
+                    "id": "ResourceType",
+                    "type": "string",
+                    "enum": [
+                        "Document",
+                        "Stylesheet",
+                        "Image",
+                        "Font",
+                        "Script",
+                        "XHR",
+                        "WebSocket",
+                        "Other"
+                    ],
+                    "description": "Resource type as it was perceived by the rendering engine."
+                },
+                {
+                    "id": "CoordinateSystem",
+                    "type": "string",
+                    "enum": [
+                        "Viewport",
+                        "Page"
+                    ],
+                    "description": "Coordinate system used by supplied coordinates."
+                },
+                {
+                    "id": "Frame",
+                    "type": "object",
+                    "description": "Information about the Frame on the page.",
+                    "properties": [
+                        {
+                            "name": "id",
+                            "type": "string",
+                            "description": "Frame unique identifier."
+                        },
+                        {
+                            "name": "parentId",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Parent frame identifier."
+                        },
+                        {
+                            "name": "loaderId",
+                            "type": "string",
+                            "description": "Identifier of the loader associated with this frame."
+                        },
+                        {
+                            "name": "name",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Frame's name as specified in the tag."
+                        },
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "description": "Frame document's URL."
+                        },
+                        {
+                            "name": "securityOrigin",
+                            "type": "string",
+                            "description": "Frame document's security origin."
+                        },
+                        {
+                            "name": "mimeType",
+                            "type": "string",
+                            "description": "Frame document's mimeType as determined by the browser."
+                        }
+                    ]
+                },
+                {
+                    "id": "FrameResource",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "description": "Resource URL."
+                        },
+                        {
+                            "name": "type",
+                            "$ref": "ResourceType",
+                            "description": "Type of this resource."
+                        },
+                        {
+                            "name": "mimeType",
+                            "type": "string",
+                            "description": "Resource mimeType as determined by the browser."
+                        },
+                        {
+                            "name": "failed",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "True if the resource failed to load."
+                        },
+                        {
+                            "name": "canceled",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "True if the resource was canceled during loading."
+                        },
+                        {
+                            "name": "sourceMapURL",
+                            "type": "string",
+                            "optional": true,
+                            "description": "URL of source map associated with this resource (if any)."
+                        }
+                    ]
+                },
+                {
+                    "id": "FrameResourceTree",
+                    "type": "object",
+                    "description": "Information about the Frame hierarchy along with their cached resources.",
+                    "properties": [
+                        {
+                            "name": "frame",
+                            "$ref": "Frame",
+                            "description": "Frame information for this tree item."
+                        },
+                        {
+                            "name": "childFrames",
+                            "type": "array",
+                            "optional": true,
+                            "items": {
+                                "$ref": "FrameResourceTree"
+                            },
+                            "description": "Child frames."
+                        },
+                        {
+                            "name": "resources",
+                            "type": "array",
+                            "items": {
+                                "$ref": "FrameResource"
+                            },
+                            "description": "Information about frame resources."
+                        }
+                    ]
+                },
+                {
+                    "id": "SearchResult",
+                    "type": "object",
+                    "description": "Search result for resource.",
+                    "properties": [
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "description": "Resource URL."
+                        },
+                        {
+                            "name": "frameId",
+                            "type": "string",
+                            "description": "Resource frame id."
+                        },
+                        {
+                            "name": "matchesCount",
+                            "type": "number",
+                            "description": "Number of matches in the resource content."
+                        },
+                        {
+                            "name": "requestId",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Network request id."
+                        }
+                    ]
+                },
+                {
+                    "id": "ScriptIdentifier",
+                    "type": "string",
+                    "description": "Unique script identifier."
+                }
+            ],
+            "commands": [
+                {
+                    "name": "enable",
+                    "description": "Enables page domain notifications."
+                },
+                {
+                    "name": "disable",
+                    "description": "Disables page domain notifications."
+                },
+                {
+                    "name": "addScriptToEvaluateOnLoad",
+                    "parameters": [
+                        {
+                            "name": "scriptSource",
+                            "type": "string"
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "identifier",
+                            "$ref": "ScriptIdentifier",
+                            "description": "Identifier of the added script."
+                        }
+                    ]
+                },
+                {
+                    "name": "removeScriptToEvaluateOnLoad",
+                    "parameters": [
+                        {
+                            "name": "identifier",
+                            "$ref": "ScriptIdentifier"
+                        }
+                    ]
+                },
+                {
+                    "name": "reload",
+                    "parameters": [
+                        {
+                            "name": "ignoreCache",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "If true, browser cache is ignored (as if the user pressed Shift+refresh)."
+                        },
+                        {
+                            "name": "scriptToEvaluateOnLoad",
+                            "type": "string",
+                            "optional": true,
+                            "description": "If set, the script will be injected into all frames of the inspected page after reload."
+                        }
+                    ],
+                    "description": "Reloads given page optionally ignoring the cache."
+                },
+                {
+                    "name": "getResourceTree",
+                    "description": "Returns present frame / resource tree structure.",
+                    "returns": [
+                        {
+                            "name": "frameTree",
+                            "$ref": "FrameResourceTree",
+                            "description": "Present frame / resource tree structure."
+                        }
+                    ]
+                },
+                {
+                    "name": "getResourceContent",
+                    "description": "Returns content of the given resource.",
+                    "parameters": [
+                        {
+                            "name": "frameId",
+                            "type": "string",
+                            "description": "Frame id to get resource for."
+                        },
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "description": "URL of the resource to get content for."
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "content",
+                            "type": "string",
+                            "description": "Resource content."
+                        },
+                        {
+                            "name": "base64Encoded",
+                            "type": "boolean",
+                            "description": "True, if content was served as base64."
+                        }
+                    ]
+                },
+                {
+                    "name": "searchInResource",
+                    "description": "Searches for given string in resource content.",
+                    "parameters": [
+                        {
+                            "name": "frameId",
+                            "type": "string",
+                            "description": "Frame id for resource to search in."
+                        },
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "description": "URL of the resource to search in."
+                        },
+                        {
+                            "name": "query",
+                            "type": "string",
+                            "description": "String to search for."
+                        },
+                        {
+                            "name": "caseSensitive",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "If true, search is case sensitive."
+                        },
+                        {
+                            "name": "isRegex",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "If true, treats string parameter as regex."
+                        },
+                        {
+                            "name": "requestId",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Request id for resource to search in."
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "result",
+                            "type": "array",
+                            "items": {
+                                "$ref": "GenericTypes.SearchMatch"
+                            },
+                            "description": "List of search matches."
+                        }
+                    ]
+                },
+                {
+                    "name": "searchInResources",
+                    "description": "Searches for given string in frame / resource tree structure.",
+                    "parameters": [
+                        {
+                            "name": "text",
+                            "type": "string",
+                            "description": "String to search for."
+                        },
+                        {
+                            "name": "caseSensitive",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "If true, search is case sensitive."
+                        },
+                        {
+                            "name": "isRegex",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "If true, treats string parameter as regex."
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "result",
+                            "type": "array",
+                            "items": {
+                                "$ref": "SearchResult"
+                            },
+                            "description": "List of search results."
+                        }
+                    ]
+                },
+                {
+                    "name": "setDocumentContent",
+                    "description": "Sets given markup as the document's HTML.",
+                    "parameters": [
+                        {
+                            "name": "frameId",
+                            "type": "string",
+                            "description": "Frame id to set HTML for."
+                        },
+                        {
+                            "name": "html",
+                            "type": "string",
+                            "description": "HTML content to set."
+                        }
+                    ]
+                }
+            ],
+            "events": [
+                {
+                    "name": "loadEventFired",
+                    "parameters": [
+                        {
+                            "name": "timestamp",
+                            "type": "number"
+                        }
+                    ]
+                },
+                {
+                    "name": "frameDetached",
+                    "description": "Fired when frame has been detached from its parent.",
+                    "parameters": [
+                        {
+                            "name": "frameId",
+                            "type": "string",
+                            "description": "Id of the frame that has been detached."
+                        }
+                    ]
+                },
+                {
+                    "name": "frameStartedLoading",
+                    "description": "Fired when frame has started loading.",
+                    "parameters": [
+                        {
+                            "name": "frameId",
+                            "type": "string",
+                            "description": "Id of the frame that has started loading."
+                        }
+                    ]
+                },
+                {
+                    "name": "frameStoppedLoading",
+                    "description": "Fired when frame has stopped loading.",
+                    "parameters": [
+                        {
+                            "name": "frameId",
+                            "type": "string",
+                            "description": "Id of the frame that has stopped loading."
+                        }
+                    ]
+                }
+            ]
+        },
+        {
+            "domain": "Network",
+            "description": "Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.",
+            "types": [
+                {
+                    "id": "LoaderId",
+                    "type": "string",
+                    "description": "Unique loader identifier."
+                },
+                {
+                    "id": "FrameId",
+                    "type": "string",
+                    "description": "Unique frame identifier."
+                },
+                {
+                    "id": "RequestId",
+                    "type": "string",
+                    "description": "Unique request identifier."
+                },
+                {
+                    "id": "Timestamp",
+                    "type": "number",
+                    "description": "Number of seconds since epoch."
+                },
+                {
+                    "id": "Headers",
+                    "type": "object",
+                    "description": "Request / response headers as keys / values of JSON object."
+                },
+                {
+                    "id": "ResourceTiming",
+                    "type": "object",
+                    "description": "Timing information for the request.",
+                    "properties": [
+                        {
+                            "name": "startTime",
+                            "type": "number",
+                            "description": "Timing's startTime is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this."
+                        },
+                        {
+                            "name": "domainLookupStart",
+                            "type": "number",
+                            "description": "Started DNS address resolve."
+                        },
+                        {
+                            "name": "domainLookupEnd",
+                            "type": "number",
+                            "description": "Finished DNS address resolve."
+                        },
+                        {
+                            "name": "connectStart",
+                            "type": "number",
+                            "description": "Started connecting to the remote host."
+                        },
+                        {
+                            "name": "connectEnd",
+                            "type": "number",
+                            "description": "Connected to the remote host."
+                        },
+                        {
+                            "name": "secureConnectionStart",
+                            "type": "number",
+                            "description": "Started SSL handshake."
+                        },
+                        {
+                            "name": "requestStart",
+                            "type": "number",
+                            "description": "Started sending request."
+                        },
+                        {
+                            "name": "responseStart",
+                            "type": "number",
+                            "description": "Started receiving response headers."
+                        }
+                    ]
+                },
+                {
+                    "id": "Request",
+                    "type": "object",
+                    "description": "HTTP request data.",
+                    "properties": [
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "description": "Request URL."
+                        },
+                        {
+                            "name": "method",
+                            "type": "string",
+                            "description": "HTTP request method."
+                        },
+                        {
+                            "name": "headers",
+                            "$ref": "Headers",
+                            "description": "HTTP request headers."
+                        },
+                        {
+                            "name": "postData",
+                            "type": "string",
+                            "optional": true,
+                            "description": "HTTP POST request data."
+                        }
+                    ]
+                },
+                {
+                    "id": "Response",
+                    "type": "object",
+                    "description": "HTTP response data.",
+                    "properties": [
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "description": "Response URL. This URL can be different from CachedResource.url in case of redirect."
+                        },
+                        {
+                            "name": "status",
+                            "type": "number",
+                            "description": "HTTP response status code."
+                        },
+                        {
+                            "name": "statusText",
+                            "type": "string",
+                            "description": "HTTP response status text."
+                        },
+                        {
+                            "name": "headers",
+                            "$ref": "Headers",
+                            "description": "HTTP response headers."
+                        },
+                        {
+                            "name": "headersText",
+                            "type": "string",
+                            "optional": true,
+                            "description": "HTTP response headers text."
+                        },
+                        {
+                            "name": "mimeType",
+                            "type": "string",
+                            "description": "Resource mimeType as determined by the browser."
+                        },
+                        {
+                            "name": "requestHeaders",
+                            "$ref": "Headers",
+                            "optional": true,
+                            "description": "Refined HTTP request headers that were actually transmitted over the network."
+                        },
+                        {
+                            "name": "requestHeadersText",
+                            "type": "string",
+                            "optional": true,
+                            "description": "HTTP request headers text."
+                        },
+                        {
+                            "name": "fromDiskCache",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "Specifies that the request was served from the disk cache."
+                        },
+                        {
+                            "name": "timing",
+                            "$ref": "ResourceTiming",
+                            "optional": true,
+                            "description": "Timing information for the given request."
+                        }
+                    ]
+                },
+                {
+                    "id": "WebSocketRequest",
+                    "type": "object",
+                    "description": "WebSocket request data.",
+                    "properties": [
+                        {
+                            "name": "headers",
+                            "$ref": "Headers",
+                            "description": "HTTP response headers."
+                        }
+                    ]
+                },
+                {
+                    "id": "WebSocketResponse",
+                    "type": "object",
+                    "description": "WebSocket response data.",
+                    "properties": [
+                        {
+                            "name": "status",
+                            "type": "number",
+                            "description": "HTTP response status code."
+                        },
+                        {
+                            "name": "statusText",
+                            "type": "string",
+                            "description": "HTTP response status text."
+                        },
+                        {
+                            "name": "headers",
+                            "$ref": "Headers",
+                            "description": "HTTP response headers."
+                        }
+                    ]
+                },
+                {
+                    "id": "WebSocketFrame",
+                    "type": "object",
+                    "description": "WebSocket frame data.",
+                    "properties": [
+                        {
+                            "name": "opcode",
+                            "type": "number",
+                            "description": "WebSocket frame opcode."
+                        },
+                        {
+                            "name": "mask",
+                            "type": "boolean",
+                            "description": "WebSocket frame mask."
+                        },
+                        {
+                            "name": "payloadData",
+                            "type": "string",
+                            "description": "WebSocket frame payload data."
+                        }
+                    ]
+                },
+                {
+                    "id": "CachedResource",
+                    "type": "object",
+                    "description": "Information about the cached resource.",
+                    "properties": [
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "description": "Resource URL. This is the url of the original network request."
+                        },
+                        {
+                            "name": "type",
+                            "$ref": "Page.ResourceType",
+                            "description": "Type of this resource."
+                        },
+                        {
+                            "name": "response",
+                            "$ref": "Response",
+                            "optional": true,
+                            "description": "Cached response data."
+                        },
+                        {
+                            "name": "bodySize",
+                            "type": "number",
+                            "description": "Cached response body size."
+                        },
+                        {
+                            "name": "sourceMapURL",
+                            "type": "string",
+                            "optional": true,
+                            "description": "URL of source map associated with this resource (if any)."
+                        }
+                    ]
+                },
+                {
+                    "id": "Initiator",
+                    "type": "object",
+                    "description": "Information about the request initiator.",
+                    "properties": [
+                        {
+                            "name": "type",
+                            "type": "string",
+                            "enum": [
+                                "parser",
+                                "script",
+                                "other"
+                            ],
+                            "description": "Type of this initiator."
+                        },
+                        {
+                            "name": "stackTrace",
+                            "$ref": "Runtime.StackTrace",
+                            "optional": true,
+                            "description": "Initiator JavaScript stack trace, set for Script only."
+                        },
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Initiator URL, set for Parser type only."
+                        },
+                        {
+                            "name": "lineNumber",
+                            "type": "number",
+                            "optional": true,
+                            "description": "Initiator line number, set for Parser type only."
+                        }
+                    ]
+                }
+            ],
+            "commands": [
+                {
+                    "name": "enable",
+                    "description": "Enables network tracking, network events will now be delivered to the client."
+                },
+                {
+                    "name": "disable",
+                    "description": "Disables network tracking, prevents network events from being sent to the client."
+                },
+                {
+                    "name": "setExtraHTTPHeaders",
+                    "description": "Specifies whether to always send extra HTTP headers with the requests from this page.",
+                    "parameters": [
+                        {
+                            "name": "headers",
+                            "$ref": "Headers",
+                            "description": "Map with extra HTTP headers."
+                        }
+                    ]
+                },
+                {
+                    "name": "getResponseBody",
+                    "description": "Returns content served for the given request.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Identifier of the network request to get content for."
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "body",
+                            "type": "string",
+                            "description": "Response body."
+                        },
+                        {
+                            "name": "base64Encoded",
+                            "type": "boolean",
+                            "description": "True, if content was sent as base64."
+                        }
+                    ]
+                },
+                {
+                    "name": "setCacheDisabled",
+                    "parameters": [
+                        {
+                            "name": "cacheDisabled",
+                            "type": "boolean",
+                            "description": "Cache disabled state."
+                        }
+                    ],
+                    "description": "Toggles ignoring cache for each request. If <code>true</code>, cache will not be used."
+                },
+                {
+                    "name": "loadResource",
+                    "async": true,
+                    "parameters": [
+                        {
+                            "name": "frameId",
+                            "$ref": "FrameId",
+                            "description": "Frame to load the resource from."
+                        },
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "description": "URL of the resource to load."
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "content",
+                            "type": "string",
+                            "description": "Resource content."
+                        },
+                        {
+                            "name": "mimeType",
+                            "type": "string",
+                            "description": "Resource mimeType."
+                        },
+                        {
+                            "name": "status",
+                            "type": "number",
+                            "description": "HTTP response status code."
+                        }
+                    ],
+                    "description": "Loads a resource in the context of a frame on the inspected page without cross origin checks."
+                }
+            ],
+            "events": [
+                {
+                    "name": "requestWillBeSent",
+                    "description": "Fired when page is about to send HTTP request.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "frameId",
+                            "$ref": "FrameId",
+                            "description": "Frame identifier."
+                        },
+                        {
+                            "name": "loaderId",
+                            "$ref": "LoaderId",
+                            "description": "Loader identifier."
+                        },
+                        {
+                            "name": "documentURL",
+                            "type": "string",
+                            "description": "URL of the document this request is loaded for."
+                        },
+                        {
+                            "name": "request",
+                            "$ref": "Request",
+                            "description": "Request data."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "initiator",
+                            "$ref": "Initiator",
+                            "description": "Request initiator."
+                        },
+                        {
+                            "name": "redirectResponse",
+                            "optional": true,
+                            "$ref": "Response",
+                            "description": "Redirect response data."
+                        },
+                        {
+                            "name": "type",
+                            "$ref": "Page.ResourceType",
+                            "optional": true,
+                            "description": "Resource type."
+                        }
+                    ]
+                },
+                {
+                    "name": "requestServedFromCache",
+                    "description": "Fired if request ended up loading from cache.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        }
+                    ]
+                },
+                {
+                    "name": "responseReceived",
+                    "description": "Fired when HTTP response is available.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "frameId",
+                            "$ref": "FrameId",
+                            "description": "Frame identifier."
+                        },
+                        {
+                            "name": "loaderId",
+                            "$ref": "LoaderId",
+                            "description": "Loader identifier."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "type",
+                            "$ref": "Page.ResourceType",
+                            "description": "Resource type."
+                        },
+                        {
+                            "name": "response",
+                            "$ref": "Response",
+                            "description": "Response data."
+                        }
+                    ]
+                },
+                {
+                    "name": "dataReceived",
+                    "description": "Fired when data chunk was received over the network.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "dataLength",
+                            "type": "integer",
+                            "description": "Data chunk length."
+                        },
+                        {
+                            "name": "encodedDataLength",
+                            "type": "integer",
+                            "description": "Actual bytes received (might be less than dataLength for compressed encodings)."
+                        }
+                    ]
+                },
+                {
+                    "name": "loadingFinished",
+                    "description": "Fired when HTTP request has finished loading.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "sourceMapURL",
+                            "type": "string",
+                            "optional": true,
+                            "description": "URL of source map associated with this resource (if any)."
+                        }
+                    ]
+                },
+                {
+                    "name": "loadingFailed",
+                    "description": "Fired when HTTP request has failed to load.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "errorText",
+                            "type": "string",
+                            "description": "User friendly error message."
+                        },
+                        {
+                            "name": "canceled",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "True if loading was canceled."
+                        }
+                    ]
+                },
+                {
+                    "name": "requestServedFromMemoryCache",
+                    "description": "Fired when HTTP request has been served from memory cache.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "frameId",
+                            "$ref": "FrameId",
+                            "description": "Frame identifier."
+                        },
+                        {
+                            "name": "loaderId",
+                            "$ref": "LoaderId",
+                            "description": "Loader identifier."
+                        },
+                        {
+                            "name": "documentURL",
+                            "type": "string",
+                            "description": "URL of the document this request is loaded for."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "initiator",
+                            "$ref": "Initiator",
+                            "description": "Request initiator."
+                        },
+                        {
+                            "name": "resource",
+                            "$ref": "CachedResource",
+                            "description": "Cached resource data."
+                        }
+                    ]
+                },
+                {
+                    "name": "webSocketWillSendHandshakeRequest",
+                    "description": "Fired when WebSocket is about to initiate handshake.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "request",
+                            "$ref": "WebSocketRequest",
+                            "description": "WebSocket request data."
+                        }
+                    ]
+                },
+                {
+                    "name": "webSocketHandshakeResponseReceived",
+                    "description": "Fired when WebSocket handshake response becomes available.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "response",
+                            "$ref": "WebSocketResponse",
+                            "description": "WebSocket response data."
+                        }
+                    ]
+                },
+                {
+                    "name": "webSocketCreated",
+                    "description": "Fired upon WebSocket creation.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "url",
+                            "type": "string",
+                            "description": "WebSocket request URL."
+                        }
+                    ]
+                },
+                {
+                    "name": "webSocketClosed",
+                    "description": "Fired when WebSocket is closed.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        }
+                    ]
+                },
+                {
+                    "name": "webSocketFrameReceived",
+                    "description": "Fired when WebSocket frame is received.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "response",
+                            "$ref": "WebSocketFrame",
+                            "description": "WebSocket response data."
+                        }
+                    ]
+                },
+                {
+                    "name": "webSocketFrameError",
+                    "description": "Fired when WebSocket frame error occurs.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "errorMessage",
+                            "type": "string",
+                            "description": "WebSocket frame error message."
+                        }
+                    ]
+                },
+                {
+                    "name": "webSocketFrameSent",
+                    "description": "Fired when WebSocket frame is sent.",
+                    "parameters": [
+                        {
+                            "name": "requestId",
+                            "$ref": "RequestId",
+                            "description": "Request identifier."
+                        },
+                        {
+                            "name": "timestamp",
+                            "$ref": "Timestamp",
+                            "description": "Timestamp."
+                        },
+                        {
+                            "name": "response",
+                            "$ref": "WebSocketFrame",
+                            "description": "WebSocket response data."
+                        }
+                    ]
+                }
+            ]
+        },
+        {
+            "domain": "DOM",
+            "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.",
+            "types": [
+                {
+                    "id": "NodeId",
+                    "type": "integer",
+                    "description": "Unique DOM node identifier."
+                },
+                {
+                    "id": "BackendNodeId",
+                    "type": "integer",
+                    "description": "Unique DOM node identifier used to reference a node that may not have been pushed to the front-end."
+                },
+                {
+                    "id": "PseudoType",
+                    "type": "string",
+                    "enum": [
+                        "before",
+                        "after"
+                    ],
+                    "description": "Pseudo element type."
+                },
+                {
+                    "id": "ShadowRootType",
+                    "type": "string",
+                    "enum": [
+                        "user-agent",
+                        "open",
+                        "closed"
+                    ],
+                    "description": "Shadow root type."
+                },
+                {
+                    "id": "LiveRegionRelevant",
+                    "type": "string",
+                    "enum": [
+                        "additions",
+                        "removals",
+                        "text"
+                    ],
+                    "description": "Token values of @aria-relevant attribute."
+                },
+                {
+                    "id": "Node",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client."
+                        },
+                        {
+                            "name": "nodeType",
+                            "type": "integer",
+                            "description": "<code>Node</code>'s nodeType."
+                        },
+                        {
+                            "name": "nodeName",
+                            "type": "string",
+                            "description": "<code>Node</code>'s nodeName."
+                        },
+                        {
+                            "name": "localName",
+                            "type": "string",
+                            "description": "<code>Node</code>'s localName."
+                        },
+                        {
+                            "name": "nodeValue",
+                            "type": "string",
+                            "description": "<code>Node</code>'s nodeValue."
+                        },
+                        {
+                            "name": "childNodeCount",
+                            "type": "integer",
+                            "optional": true,
+                            "description": "Child count for <code>Container</code> nodes."
+                        },
+                        {
+                            "name": "children",
+                            "type": "array",
+                            "optional": true,
+                            "items": {
+                                "$ref": "Node"
+                            },
+                            "description": "Child nodes of this node when requested with children."
+                        },
+                        {
+                            "name": "attributes",
+                            "type": "array",
+                            "optional": true,
+                            "items": {
+                                "type": "string"
+                            },
+                            "description": "Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>."
+                        },
+                        {
+                            "name": "documentURL",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Document URL that <code>Document</code> or <code>FrameOwner</code> node points to."
+                        },
+                        {
+                            "name": "baseURL",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion."
+                        },
+                        {
+                            "name": "publicId",
+                            "type": "string",
+                            "optional": true,
+                            "description": "<code>DocumentType</code>'s publicId."
+                        },
+                        {
+                            "name": "systemId",
+                            "type": "string",
+                            "optional": true,
+                            "description": "<code>DocumentType</code>'s systemId."
+                        },
+                        {
+                            "name": "xmlVersion",
+                            "type": "string",
+                            "optional": true,
+                            "description": "<code>Document</code>'s XML version in case of XML documents."
+                        },
+                        {
+                            "name": "name",
+                            "type": "string",
+                            "optional": true,
+                            "description": "<code>Attr</code>'s name."
+                        },
+                        {
+                            "name": "value",
+                            "type": "string",
+                            "optional": true,
+                            "description": "<code>Attr</code>'s value."
+                        },
+                        {
+                            "name": "pseudoType",
+                            "$ref": "PseudoType",
+                            "optional": true,
+                            "description": "Pseudo element type for this node."
+                        },
+                        {
+                            "name": "shadowRootType",
+                            "$ref": "ShadowRootType",
+                            "optional": true,
+                            "description": "Shadow root type."
+                        },
+                        {
+                            "name": "frameId",
+                            "$ref": "Network.FrameId",
+                            "optional": true,
+                            "description": "Frame ID for frame owner elements."
+                        },
+                        {
+                            "name": "contentDocument",
+                            "$ref": "Node",
+                            "optional": true,
+                            "description": "Content document for frame owner elements."
+                        },
+                        {
+                            "name": "shadowRoots",
+                            "type": "array",
+                            "optional": true,
+                            "items": {
+                                "$ref": "Node"
+                            },
+                            "description": "Shadow root list for given element host."
+                        },
+                        {
+                            "name": "templateContent",
+                            "$ref": "Node",
+                            "optional": true,
+                            "description": "Content document fragment for template elements"
+                        },
+                        {
+                            "name": "pseudoElements",
+                            "type": "array",
+                            "items": {
+                                "$ref": "Node"
+                            },
+                            "optional": true,
+                            "description": "Pseudo elements associated with this node."
+                        },
+                        {
+                            "name": "role",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Computed value for first recognized role token, default role per element, or overridden role."
+                        },
+                        {
+                            "name": "contentSecurityPolicyHash",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Computed SHA-256 Content Security Policy hash source for given element."
+                        }
+                    ],
+                    "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
+                },
+                {
+                    "id": "RGBAColor",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "r",
+                            "type": "integer",
+                            "description": "The red component, in the [0-255] range."
+                        },
+                        {
+                            "name": "g",
+                            "type": "integer",
+                            "description": "The green component, in the [0-255] range."
+                        },
+                        {
+                            "name": "b",
+                            "type": "integer",
+                            "description": "The blue component, in the [0-255] range."
+                        },
+                        {
+                            "name": "a",
+                            "type": "number",
+                            "optional": true,
+                            "description": "The alpha component, in the [0-1] range (default: 1)."
+                        }
+                    ],
+                    "description": "A structure holding an RGBA color."
+                },
+                {
+                    "id": "Quad",
+                    "type": "array",
+                    "items": {
+                        "type": "number"
+                    },
+                    "minItems": 8,
+                    "maxItems": 8,
+                    "description": "An array of quad vertices, x immediately followed by y for each point, points clock-wise."
+                },
+                {
+                    "id": "HighlightConfig",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "showInfo",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "Whether the node info tooltip should be shown (default: false)."
+                        },
+                        {
+                            "name": "contentColor",
+                            "$ref": "RGBAColor",
+                            "optional": true,
+                            "description": "The content box highlight fill color (default: transparent)."
+                        },
+                        {
+                            "name": "paddingColor",
+                            "$ref": "RGBAColor",
+                            "optional": true,
+                            "description": "The padding highlight fill color (default: transparent)."
+                        },
+                        {
+                            "name": "borderColor",
+                            "$ref": "RGBAColor",
+                            "optional": true,
+                            "description": "The border highlight fill color (default: transparent)."
+                        },
+                        {
+                            "name": "marginColor",
+                            "$ref": "RGBAColor",
+                            "optional": true,
+                            "description": "The margin highlight fill color (default: transparent)."
+                        }
+                    ],
+                    "description": "Configuration data for the highlighting of page elements."
+                }
+            ],
+            "commands": [
+                {
+                    "name": "enable"
+                },
+                {
+                    "name": "disable"
+                },
+                {
+                    "name": "getDocument",
+                    "returns": [
+                        {
+                            "name": "root",
+                            "$ref": "Node",
+                            "description": "Resulting node."
+                        }
+                    ],
+                    "description": "Returns the root DOM node to the caller."
+                },
+                {
+                    "name": "removeNode",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the node to remove."
+                        }
+                    ],
+                    "description": "Removes node with given id."
+                },
+                {
+                    "name": "setAttributeValue",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the element to set attribute for."
+                        },
+                        {
+                            "name": "name",
+                            "type": "string",
+                            "description": "Attribute name."
+                        },
+                        {
+                            "name": "value",
+                            "type": "string",
+                            "description": "Attribute value."
+                        }
+                    ],
+                    "description": "Sets attribute for an element with given id."
+                },
+                {
+                    "name": "setAttributesAsText",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the element to set attributes for."
+                        },
+                        {
+                            "name": "text",
+                            "type": "string",
+                            "description": "Text with a number of attributes. Will parse this text using HTML parser."
+                        },
+                        {
+                            "name": "name",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Attribute name to replace with new attributes derived from text in case text parsed successfully."
+                        }
+                    ],
+                    "description": "Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs."
+                },
+                {
+                    "name": "removeAttribute",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the element to remove attribute from."
+                        },
+                        {
+                            "name": "name",
+                            "type": "string",
+                            "description": "Name of the attribute to remove."
+                        }
+                    ],
+                    "description": "Removes attribute with given name from an element with given id."
+                },
+                {
+                    "name": "performSearch",
+                    "parameters": [
+                        {
+                            "name": "query",
+                            "type": "string",
+                            "description": "Plain text or query selector or XPath search query."
+                        },
+                        {
+                            "name": "nodeIds",
+                            "type": "array",
+                            "items": {
+                                "$ref": "NodeId"
+                            },
+                            "optional": true,
+                            "description": "Ids of nodes to use as starting points for the search."
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "searchId",
+                            "type": "string",
+                            "description": "Unique search session identifier."
+                        },
+                        {
+                            "name": "resultCount",
+                            "type": "integer",
+                            "description": "Number of search results."
+                        }
+                    ],
+                    "description": "Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session."
+                },
+                {
+                    "name": "getSearchResults",
+                    "parameters": [
+                        {
+                            "name": "searchId",
+                            "type": "string",
+                            "description": "Unique search session identifier."
+                        },
+                        {
+                            "name": "fromIndex",
+                            "type": "integer",
+                            "description": "Start index of the search result to be returned."
+                        },
+                        {
+                            "name": "toIndex",
+                            "type": "integer",
+                            "description": "End index of the search result to be returned."
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "nodeIds",
+                            "type": "array",
+                            "items": {
+                                "$ref": "NodeId"
+                            },
+                            "description": "Ids of the search result nodes."
+                        }
+                    ],
+                    "description": "Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier."
+                },
+                {
+                    "name": "discardSearchResults",
+                    "parameters": [
+                        {
+                            "name": "searchId",
+                            "type": "string",
+                            "description": "Unique search session identifier."
+                        }
+                    ],
+                    "description": "Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search."
+                },
+                {
+                    "name": "highlightNode",
+                    "parameters": [
+                        {
+                            "name": "highlightConfig",
+                            "$ref": "HighlightConfig",
+                            "description": "A descriptor for the highlight appearance."
+                        },
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "optional": true,
+                            "description": "Identifier of the node to highlight."
+                        },
+                        {
+                            "name": "objectId",
+                            "$ref": "Runtime.RemoteObjectId",
+                            "optional": true,
+                            "description": "JavaScript object id of the node to be highlighted."
+                        }
+                    ],
+                    "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified."
+                },
+                {
+                    "name": "hideHighlight",
+                    "description": "Hides DOM node highlight."
+                },
+                {
+                    "name": "resolveNode",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the node to resolve."
+                        },
+                        {
+                            "name": "objectGroup",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Symbolic group name that can be used to release multiple objects."
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "object",
+                            "$ref": "Runtime.RemoteObject",
+                            "description": "JavaScript object wrapper for given node."
+                        }
+                    ],
+                    "description": "Resolves JavaScript node object for given node id."
+                }
+            ],
+            "events": [
+                {
+                    "name": "documentUpdated",
+                    "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid."
+                },
+                {
+                    "name": "setChildNodes",
+                    "parameters": [
+                        {
+                            "name": "parentId",
+                            "$ref": "NodeId",
+                            "description": "Parent node id to populate with children."
+                        },
+                        {
+                            "name": "nodes",
+                            "type": "array",
+                            "items": {
+                                "$ref": "Node"
+                            },
+                            "description": "Child nodes array."
+                        }
+                    ],
+                    "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids."
+                },
+                {
+                    "name": "attributeModified",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the node that has changed."
+                        },
+                        {
+                            "name": "name",
+                            "type": "string",
+                            "description": "Attribute name."
+                        },
+                        {
+                            "name": "value",
+                            "type": "string",
+                            "description": "Attribute value."
+                        }
+                    ],
+                    "description": "Fired when <code>Element</code>'s attribute is modified."
+                },
+                {
+                    "name": "attributeRemoved",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the node that has changed."
+                        },
+                        {
+                            "name": "name",
+                            "type": "string",
+                            "description": "A ttribute name."
+                        }
+                    ],
+                    "description": "Fired when <code>Element</code>'s attribute is removed."
+                },
+                {
+                    "name": "inlineStyleInvalidated",
+                    "parameters": [
+                        {
+                            "name": "nodeIds",
+                            "type": "array",
+                            "items": {
+                                "$ref": "NodeId"
+                            },
+                            "description": "Ids of the nodes for which the inline styles have been invalidated."
+                        }
+                    ],
+                    "description": "Fired when <code>Element</code>'s inline style is modified via a CSS property modification."
+                },
+                {
+                    "name": "characterDataModified",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the node that has changed."
+                        },
+                        {
+                            "name": "characterData",
+                            "type": "string",
+                            "description": "New text value."
+                        }
+                    ],
+                    "description": "Mirrors <code>DOMCharacterDataModified</code> event."
+                },
+                {
+                    "name": "childNodeCountUpdated",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the node that has changed."
+                        },
+                        {
+                            "name": "childNodeCount",
+                            "type": "integer",
+                            "description": "New node count."
+                        }
+                    ],
+                    "description": "Fired when <code>Container</code>'s child node count has changed."
+                },
+                {
+                    "name": "childNodeInserted",
+                    "parameters": [
+                        {
+                            "name": "parentNodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the node that has changed."
+                        },
+                        {
+                            "name": "previousNodeId",
+                            "$ref": "NodeId",
+                            "description": "If of the previous siblint."
+                        },
+                        {
+                            "name": "node",
+                            "$ref": "Node",
+                            "description": "Inserted node data."
+                        }
+                    ],
+                    "description": "Mirrors <code>DOMNodeInserted</code> event."
+                },
+                {
+                    "name": "childNodeRemoved",
+                    "parameters": [
+                        {
+                            "name": "parentNodeId",
+                            "$ref": "NodeId",
+                            "description": "Parent id."
+                        },
+                        {
+                            "name": "nodeId",
+                            "$ref": "NodeId",
+                            "description": "Id of the node that has been removed."
+                        }
+                    ],
+                    "description": "Mirrors <code>DOMNodeRemoved</code> event."
+                },
+                {
+                    "name": "shadowRootPushed",
+                    "parameters": [
+                        {
+                            "name": "hostId",
+                            "$ref": "NodeId",
+                            "description": "Host element id."
+                        },
+                        {
+                            "name": "root",
+                            "$ref": "Node",
+                            "description": "Shadow root."
+                        }
+                    ],
+                    "description": "Called when shadow root is pushed into the element."
+                },
+                {
+                    "name": "shadowRootPopped",
+                    "parameters": [
+                        {
+                            "name": "hostId",
+                            "$ref": "NodeId",
+                            "description": "Host element id."
+                        },
+                        {
+                            "name": "rootId",
+                            "$ref": "NodeId",
+                            "description": "Shadow root id."
+                        }
+                    ],
+                    "description": "Called when shadow root is popped from the element."
+                },
+                {
+                    "name": "pseudoElementAdded",
+                    "parameters": [
+                        {
+                            "name": "parentId",
+                            "$ref": "NodeId",
+                            "description": "Pseudo element's parent element id."
+                        },
+                        {
+                            "name": "pseudoElement",
+                            "$ref": "Node",
+                            "description": "The added pseudo element."
+                        }
+                    ],
+                    "description": "Called when a pseudo element is added to an element."
+                },
+                {
+                    "name": "pseudoElementRemoved",
+                    "parameters": [
+                        {
+                            "name": "parentId",
+                            "$ref": "NodeId",
+                            "description": "Pseudo element's parent element id."
+                        },
+                        {
+                            "name": "pseudoElementId",
+                            "$ref": "NodeId",
+                            "description": "The removed pseudo element id."
+                        }
+                    ],
+                    "description": "Called when a pseudo element is removed from an element."
+                }
+            ]
+        },
+        {
+            "domain": "CSS",
+            "experimental": true,
+            "description": "This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles) have an associated 'id' used in subsequent operations on the related object. Each object type has a specific 'id' structure, and those are not interchangeable between objects of different kinds. CSS objects can be loaded using the <code>get*ForNode()</code> calls (which accept a DOM node id). A client can also discover all the existing stylesheets with the <code>getAllStyleSheets()</code> method (or keeping track of the <code>styleSheetAdded</code>/<code>styleSheetRemoved</code> events) and subsequently load the required stylesheet contents using the <code>getStyleSheet[Text]()</code> methods.",
+            "types": [
+                {
+                    "id": "StyleSheetId",
+                    "type": "string"
+                },
+                {
+                    "id": "StyleSheetOrigin",
+                    "type": "string",
+                    "enum": [
+                        "injected",
+                        "user-agent",
+                        "inspector",
+                        "regular"
+                    ],
+                    "description": "Stylesheet type: \"injected\" for stylesheets injected via extension, \"user-agent\" for user-agent stylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via inspector\" rules), \"regular\" for regular stylesheets."
+                },
+                {
+                    "id": "PseudoElementMatches",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "pseudoType",
+                            "$ref": "DOM.PseudoType",
+                            "description": "Pseudo element type."
+                        },
+                        {
+                            "name": "matches",
+                            "type": "array",
+                            "items": {
+                                "$ref": "RuleMatch"
+                            },
+                            "description": "Matches of CSS rules applicable to the pseudo style."
+                        }
+                    ],
+                    "description": "CSS rule collection for a single pseudo style."
+                },
+                {
+                    "id": "InheritedStyleEntry",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "inlineStyle",
+                            "$ref": "CSSStyle",
+                            "optional": true,
+                            "description": "The ancestor node's inline style, if any, in the style inheritance chain."
+                        },
+                        {
+                            "name": "matchedCSSRules",
+                            "type": "array",
+                            "items": {
+                                "$ref": "RuleMatch"
+                            },
+                            "description": "Matches of CSS rules matching the ancestor node in the style inheritance chain."
+                        }
+                    ],
+                    "description": "Inherited CSS rule collection from ancestor node."
+                },
+                {
+                    "id": "RuleMatch",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "rule",
+                            "$ref": "CSSRule",
+                            "description": "CSS rule in the match."
+                        },
+                        {
+                            "name": "matchingSelectors",
+                            "type": "array",
+                            "items": {
+                                "type": "integer"
+                            },
+                            "description": "Matching selector indices in the rule's selectorList selectors (0-based)."
+                        }
+                    ],
+                    "description": "Match data for a CSS rule."
+                },
+                {
+                    "id": "Value",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "text",
+                            "type": "string",
+                            "description": "Value text."
+                        },
+                        {
+                            "name": "range",
+                            "$ref": "SourceRange",
+                            "optional": true,
+                            "description": "Value range in the underlying resource (if available)."
+                        }
+                    ],
+                    "description": "Data for a simple selector (these are delimited by commas in a selector list)."
+                },
+                {
+                    "id": "SelectorList",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "selectors",
+                            "type": "array",
+                            "items": {
+                                "$ref": "Value"
+                            },
+                            "description": "Selectors in the list."
+                        },
+                        {
+                            "name": "text",
+                            "type": "string",
+                            "description": "Rule selector text."
+                        }
+                    ],
+                    "description": "Selector list data."
+                },
+                {
+                    "id": "CSSStyleSheetHeader",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "styleSheetId",
+                            "$ref": "StyleSheetId",
+                            "description": "The stylesheet identifier."
+                        },
+                        {
+                            "name": "frameId",
+                            "type": "string",
+                            "description": "Owner frame identifier."
+                        },
+                        {
+                            "name": "sourceURL",
+                            "type": "string",
+                            "description": "Stylesheet resource URL."
+                        },
+                        {
+                            "name": "sourceMapURL",
+                            "type": "string",
+                            "optional": true,
+                            "description": "URL of source map associated with the stylesheet (if any)."
+                        },
+                        {
+                            "name": "origin",
+                            "$ref": "StyleSheetOrigin",
+                            "description": "Stylesheet origin."
+                        },
+                        {
+                            "name": "title",
+                            "type": "string",
+                            "description": "Stylesheet title."
+                        },
+                        {
+                            "name": "ownerNode",
+                            "$ref": "DOM.BackendNodeId",
+                            "optional": true,
+                            "description": "The backend id for the owner node of the stylesheet."
+                        },
+                        {
+                            "name": "disabled",
+                            "type": "boolean",
+                            "description": "Denotes whether the stylesheet is disabled."
+                        },
+                        {
+                            "name": "hasSourceURL",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "Whether the sourceURL field value comes from the sourceURL comment."
+                        },
+                        {
+                            "name": "isInline",
+                            "type": "boolean",
+                            "description": "Whether this stylesheet is created for STYLE tag by parser. This flag is not set for document.written STYLE tags."
+                        },
+                        {
+                            "name": "startLine",
+                            "type": "number",
+                            "description": "Line offset of the stylesheet within the resource (zero based)."
+                        },
+                        {
+                            "name": "startColumn",
+                            "type": "number",
+                            "description": "Column offset of the stylesheet within the resource (zero based)."
+                        }
+                    ],
+                    "description": "CSS stylesheet metainformation."
+                },
+                {
+                    "id": "CSSRule",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "styleSheetId",
+                            "$ref": "StyleSheetId",
+                            "optional": true,
+                            "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from."
+                        },
+                        {
+                            "name": "selectorList",
+                            "$ref": "SelectorList",
+                            "description": "Rule selector data."
+                        },
+                        {
+                            "name": "origin",
+                            "$ref": "StyleSheetOrigin",
+                            "description": "Parent stylesheet's origin."
+                        },
+                        {
+                            "name": "style",
+                            "$ref": "CSSStyle",
+                            "description": "Associated style declaration."
+                        },
+                        {
+                            "name": "media",
+                            "type": "array",
+                            "items": {
+                                "$ref": "CSSMedia"
+                            },
+                            "optional": true,
+                            "description": "Media list array (for rules involving media queries). The array enumerates media queries starting with the innermost one, going outwards."
+                        }
+                    ],
+                    "description": "CSS rule representation."
+                },
+                {
+                    "id": "SourceRange",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "startLine",
+                            "type": "integer",
+                            "description": "Start line of range."
+                        },
+                        {
+                            "name": "startColumn",
+                            "type": "integer",
+                            "description": "Start column of range (inclusive)."
+                        },
+                        {
+                            "name": "endLine",
+                            "type": "integer",
+                            "description": "End line of range"
+                        },
+                        {
+                            "name": "endColumn",
+                            "type": "integer",
+                            "description": "End column of range (exclusive)."
+                        }
+                    ],
+                    "description": "Text range within a resource. All numbers are zero-based."
+                },
+                {
+                    "id": "ShorthandEntry",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "name",
+                            "type": "string",
+                            "description": "Shorthand name."
+                        },
+                        {
+                            "name": "value",
+                            "type": "string",
+                            "description": "Shorthand value."
+                        },
+                        {
+                            "name": "important",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "Whether the property has \"!important\" annotation (implies <code>false</code> if absent)."
+                        }
+                    ]
+                },
+                {
+                    "id": "CSSComputedStyleProperty",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "name",
+                            "type": "string",
+                            "description": "Computed style property name."
+                        },
+                        {
+                            "name": "value",
+                            "type": "string",
+                            "description": "Computed style property value."
+                        }
+                    ]
+                },
+                {
+                    "id": "CSSStyle",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "styleSheetId",
+                            "$ref": "StyleSheetId",
+                            "optional": true,
+                            "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from."
+                        },
+                        {
+                            "name": "cssProperties",
+                            "type": "array",
+                            "items": {
+                                "$ref": "CSSProperty"
+                            },
+                            "description": "CSS properties in the style."
+                        },
+                        {
+                            "name": "shorthandEntries",
+                            "type": "array",
+                            "items": {
+                                "$ref": "ShorthandEntry"
+                            },
+                            "description": "Computed values for all shorthands found in the style."
+                        },
+                        {
+                            "name": "cssText",
+                            "type": "string",
+                            "optional": true,
+                            "description": "Style declaration text (if available)."
+                        },
+                        {
+                            "name": "range",
+                            "$ref": "SourceRange",
+                            "optional": true,
+                            "description": "Style declaration range in the enclosing stylesheet (if available)."
+                        }
+                    ],
+                    "description": "CSS style representation."
+                },
+                {
+                    "id": "CSSProperty",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "name",
+                            "type": "string",
+                            "description": "The property name."
+                        },
+                        {
+                            "name": "value",
+                            "type": "string",
+                            "description": "The property value."
+                        },
+                        {
+                            "name": "important",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "Whether the property has \"!important\" annotation (implies <code>false</code> if absent)."
+                        },
+                        {
+                            "name": "implicit",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "Whether the property is implicit (implies <code>false</code> if absent)."
+                        },
+                        {
+                            "name": "text",
+                            "type": "string",
+                            "optional": true,
+                            "description": "The full property text as specified in the style."
+                        },
+                        {
+                            "name": "parsedOk",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "Whether the property is understood by the browser (implies <code>true</code> if absent)."
+                        },
+                        {
+                            "name": "disabled",
+                            "type": "boolean",
+                            "optional": true,
+                            "description": "Whether the property is disabled by the user (present for source-based properties only)."
+                        },
+                        {
+                            "name": "range",
+                            "$ref": "SourceRange",
+                            "optional": true,
+                            "description": "The entire property range in the enclosing style declaration (if available)."
+                        }
+                    ],
+                    "description": "CSS property declaration data."
+                },
+                {
+                    "id": "CSSMedia",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "text",
+                            "type": "string",
+                            "description": "Media query text."
+                        },
+                        {
+                            "name": "source",
+                            "type": "string",
+                            "enum": [
+                                "mediaRule",
+                                "importRule",
+                                "linkedSheet",
+                                "inlineSheet"
+                            ],
+                            "description": "Source of the media query: \"mediaRule\" if specified by a @media rule, \"importRule\" if specified by an @import rule, \"linkedSheet\" if specified by a \"media\" attribute in a linked stylesheet's LINK tag, \"inlineSheet\" if specified by a \"media\" attribute in an inline stylesheet's STYLE tag."
+                        },
+                        {
+                            "name": "sourceURL",
+                            "type": "string",
+                            "optional": true,
+                            "description": "URL of the document containing the media query description."
+                        },
+                        {
+                            "name": "range",
+                            "$ref": "SourceRange",
+                            "optional": true,
+                            "description": "The associated rule (@media or @import) header range in the enclosing stylesheet (if available)."
+                        },
+                        {
+                            "name": "styleSheetId",
+                            "$ref": "StyleSheetId",
+                            "optional": true,
+                            "description": "Identifier of the stylesheet containing this object (if exists)."
+                        },
+                        {
+                            "name": "mediaList",
+                            "type": "array",
+                            "items": {
+                                "$ref": "MediaQuery"
+                            },
+                            "optional": true,
+                            "experimental": true,
+                            "description": "Array of media queries."
+                        }
+                    ],
+                    "description": "CSS media rule descriptor."
+                },
+                {
+                    "id": "MediaQuery",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "expressions",
+                            "type": "array",
+                            "items": {
+                                "$ref": "MediaQueryExpression"
+                            },
+                            "description": "Array of media query expressions."
+                        },
+                        {
+                            "name": "active",
+                            "type": "boolean",
+                            "description": "Whether the media query condition is satisfied."
+                        }
+                    ],
+                    "description": "Media query descriptor.",
+                    "experimental": true
+                },
+                {
+                    "id": "MediaQueryExpression",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "value",
+                            "type": "number",
+                            "description": "Media query expression value."
+                        },
+                        {
+                            "name": "unit",
+                            "type": "string",
+                            "description": "Media query expression units."
+                        },
+                        {
+                            "name": "feature",
+                            "type": "string",
+                            "description": "Media query expression feature."
+                        },
+                        {
+                            "name": "valueRange",
+                            "$ref": "SourceRange",
+                            "optional": true,
+                            "description": "The associated range of the value text in the enclosing stylesheet (if available)."
+                        },
+                        {
+                            "name": "computedLength",
+                            "type": "number",
+                            "optional": true,
+                            "description": "Computed length of media query expression (if applicable)."
+                        }
+                    ],
+                    "description": "Media query expression descriptor.",
+                    "experimental": true
+                },
+                {
+                    "id": "PlatformFontUsage",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "familyName",
+                            "type": "string",
+                            "description": "Font's family name reported by platform."
+                        },
+                        {
+                            "name": "isCustomFont",
+                            "type": "boolean",
+                            "description": "Indicates if the font was downloaded or resolved locally."
+                        },
+                        {
+                            "name": "glyphCount",
+                            "type": "number",
+                            "description": "Amount of glyphs that were rendered with this font."
+                        }
+                    ],
+                    "description": "Information about amount of glyphs that were rendered with given font.",
+                    "experimental": true
+                },
+                {
+                    "id": "CSSKeyframesRule",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "animationName",
+                            "$ref": "Value",
+                            "description": "Animation name."
+                        },
+                        {
+                            "name": "keyframes",
+                            "type": "array",
+                            "items": {
+                                "$ref": "CSSKeyframeRule"
+                            },
+                            "description": "List of keyframes."
+                        }
+                    ],
+                    "description": "CSS keyframes rule representation."
+                },
+                {
+                    "id": "CSSKeyframeRule",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "styleSheetId",
+                            "$ref": "StyleSheetId",
+                            "optional": true,
+                            "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from."
+                        },
+                        {
+                            "name": "origin",
+                            "$ref": "StyleSheetOrigin",
+                            "description": "Parent stylesheet's origin."
+                        },
+                        {
+                            "name": "keyText",
+                            "$ref": "Value",
+                            "description": "Associated key text."
+                        },
+                        {
+                            "name": "style",
+                            "$ref": "CSSStyle",
+                            "description": "Associated style declaration."
+                        }
+                    ],
+                    "description": "CSS keyframe rule representation."
+                },
+                {
+                    "id": "StyleDeclarationEdit",
+                    "type": "object",
+                    "properties": [
+                        {
+                            "name": "styleSheetId",
+                            "$ref": "StyleSheetId",
+                            "description": "The css style sheet identifier."
+                        },
+                        {
+                            "name": "range",
+                            "$ref": "SourceRange",
+                            "description": "The range of the style text in the enclosing stylesheet."
+                        },
+                        {
+                            "name": "text",
+                            "type": "string",
+                            "description": "New style text."
+                        }
+                    ],
+                    "description": "A descriptor of operation to mutate style declaration text."
+                }
+            ],
+            "commands": [
+                {
+                    "name": "enable",
+                    "async": true,
+                    "description": "Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received."
+                },
+                {
+                    "name": "disable",
+                    "description": "Disables the CSS agent for the given page."
+                },
+                {
+                    "name": "getMatchedStylesForNode",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "DOM.NodeId"
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "inlineStyle",
+                            "$ref": "CSSStyle",
+                            "optional": true,
+                            "description": "Inline style for the specified DOM node."
+                        },
+                        {
+                            "name": "attributesStyle",
+                            "$ref": "CSSStyle",
+                            "optional": true,
+                            "description": "Attribute-defined element style (e.g. resulting from \"width=20 height=100%\")."
+                        },
+                        {
+                            "name": "matchedCSSRules",
+                            "type": "array",
+                            "items": {
+                                "$ref": "RuleMatch"
+                            },
+                            "optional": true,
+                            "description": "CSS rules matching this node, from all applicable stylesheets."
+                        },
+                        {
+                            "name": "pseudoElements",
+                            "type": "array",
+                            "items": {
+                                "$ref": "PseudoElementMatches"
+                            },
+                            "optional": true,
+                            "description": "Pseudo style matches for this node."
+                        },
+                        {
+                            "name": "inherited",
+                            "type": "array",
+                            "items": {
+                                "$ref": "InheritedStyleEntry"
+                            },
+                            "optional": true,
+                            "description": "A chain of inherited styles (from the immediate node parent up to the DOM tree root)."
+                        },
+                        {
+                            "name": "cssKeyframesRules",
+                            "type": "array",
+                            "items": {
+                                "$ref": "CSSKeyframesRule"
+                            },
+                            "optional": true,
+                            "description": "A list of CSS keyframed animations matching this node."
+                        }
+                    ],
+                    "description": "Returns requested styles for a DOM node identified by <code>nodeId</code>."
+                },
+                {
+                    "name": "getInlineStylesForNode",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "DOM.NodeId"
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "inlineStyle",
+                            "$ref": "CSSStyle",
+                            "optional": true,
+                            "description": "Inline style for the specified DOM node."
+                        },
+                        {
+                            "name": "attributesStyle",
+                            "$ref": "CSSStyle",
+                            "optional": true,
+                            "description": "Attribute-defined element style (e.g. resulting from \"width=20 height=100%\")."
+                        }
+                    ],
+                    "description": "Returns the styles defined inline (explicitly in the \"style\" attribute and implicitly, using DOM attributes) for a DOM node identified by <code>nodeId</code>."
+                },
+                {
+                    "name": "getComputedStyleForNode",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "DOM.NodeId"
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "computedStyle",
+                            "type": "array",
+                            "items": {
+                                "$ref": "CSSComputedStyleProperty"
+                            },
+                            "description": "Computed style for the specified DOM node."
+                        }
+                    ],
+                    "description": "Returns the computed style for a DOM node identified by <code>nodeId</code>."
+                },
+                {
+                    "name": "getPlatformFontsForNode",
+                    "parameters": [
+                        {
+                            "name": "nodeId",
+                            "$ref": "DOM.NodeId"
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "fonts",
+                            "type": "array",
+                            "items": {
+                                "$ref": "PlatformFontUsage"
+                            },
+                            "description": "Usage statistics for every employed platform font."
+                        }
+                    ],
+                    "description": "Requests information about platform fonts which we used to render child TextNodes in the given node.",
+                    "experimental": true
+                },
+                {
+                    "name": "getStyleSheetText",
+                    "parameters": [
+                        {
+                            "name": "styleSheetId",
+                            "$ref": "StyleSheetId"
+                        }
+                    ],
+                    "returns": [
+                        {
+                            "name": "text",
+                            "type": "string",
+                            "description": "The stylesheet text."
+                        }
+                    ],
+                    "description": "Returns the current textual content and the URL for a stylesheet."
+                }
+            ],
+            "events": [
+                {
+                    "name": "mediaQueryResultChanged",
+                    "description": "Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features."
+                },
+                {
+                    "name": "fontsUpdated",
+                    "description": "Fires whenever a web font gets loaded."
+                },
+                {
+                    "name": "styleSheetChanged",
+                    "parameters": [
+                        {
+                            "name": "styleSheetId",
+                            "$ref": "StyleSheetId"
+                        }
+                    ],
+                    "description": "Fired whenever a stylesheet is changed as a result of the client operation."
+                },
+                {
+                    "name": "styleSheetAdded",
+                    "parameters": [
+                        {
+                            "name": "header",
+                            "$ref": "CSSStyleSheetHeader",
+                            "description": "Added stylesheet metainfo."
+                        }
+                    ],
+                    "description": "Fired whenever an active document stylesheet is added."
+                },
+                {
+                    "name": "styleSheetRemoved",
+                    "parameters": [
+                        {
+                            "name": "styleSheetId",
+                            "$ref": "StyleSheetId",
+                            "description": "Identifier of the removed stylesheet."
+                        }
+                    ],
+                    "description": "Fired whenever an active document stylesheet is removed."
+                },
+                {
+                    "name": "layoutEditorChange",
+                    "parameters": [
+                        {
+                            "name": "styleSheetId",
+                            "$ref": "StyleSheetId",
+                            "description": "Identifier of the stylesheet where the modification occurred."
+                        },
+                        {
+                            "name": "changeRange",
+                            "$ref": "SourceRange",
+                            "description": "Range where the modification occurred."
+                        }
+                    ]
+                }
+            ]
+        }]
 }
-- 
2.11.0 (Apple Git-81)

